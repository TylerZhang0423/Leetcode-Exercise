//70. 爬楼梯
//假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
//每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
//注意：给定 n 是一个正整数。
//示例 1：
//输入： 2
//输出： 2
//解释： 有两种方法可以爬到楼顶。
//1.  1 阶 + 1 阶
//2.  2 阶
//示例 2：
//输入： 3
//输出： 3
//解释： 有三种方法可以爬到楼顶。
//1.  1 阶 + 1 阶 + 1 阶
//2.  1 阶 + 2 阶
//3.  2 阶 + 1 阶
//主要思路：
//所以我们可以分成两个情况
//1、青蛙最后一次跳了两阶，问题变成了“跳上一个4级台阶台阶，有多少种跳法”
//2、青蛙最后一次跳了一阶，问题变成了“跳上一个5级台阶台阶，有多少种跳法”
//由上可得f(6) = f(5) + f(4);
//由此类推，f(4)=f(3) +f(2)
package climbingstairs;

public class Solution {
    public int climbStairs(int n) {
        if (n<0) {
            return 0;
        }else if (n==1) {
            return 1;
        }else if (n==2) {
            return 2;
        }else if (n==3) {
            return 3;
        }else {
            int[] dp=new int[n];
            dp[0]=1;dp[1]=2;dp[2]=3;
            for (int i=3; i<n; i++) {
                dp[i] = dp[i - 1] + dp[i - 2];
            }
            return dp[n-1];
        }
    }
}
