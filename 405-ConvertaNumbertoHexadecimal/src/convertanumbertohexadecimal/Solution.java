//405. 数字转换为十六进制数
//给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 补码运算 方法。
//注意:
//十六进制中所有字母(a-f)都必须是小写。
//十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符'0'来表示；
//对于其他情况，十六进制字符串中的第一个字符将不会是0字符。 
//给定的数确保在32位有符号整数范围内。
//不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。
//示例 1：
//输入:
//26
//输出:
//"1a"
//示例 2：
//输入:
//-1
//输出:
//"ffffffff"
package convertanumbertohexadecimal;
import java.util.Stack ;
public class Solution {
    public String toHex(int num) {
    	if (num==0) {
    		return "0";
    	}
        Stack<Integer> stack=new Stack<>();
        Stack<Long> stack1=new Stack<>();//建立长整型的栈
        String result="";
        if (num>0) {
        	while (num>0) {
        		stack.push(num%16);
        		num=num/16;
        	}
        	while (!stack.empty()) {
        		if (stack.peek()<10) {
        			result=result.concat(String.valueOf(stack.peek()));
        		}else {
        			result=result.concat(String.valueOf((char)(stack.peek()+87)));
        		}
        		stack.pop();
        	}
        }else if (num<0) {//负数的16进制用补码处理，也即ffffffff+num+1
            long num1=4294967295l+num+1;//此处需要长整型处理
        	while (num1>0) {
        		stack1.push(num1%16);
        		num1=num1/16;
        	}
        	while (!stack1.empty()) {
        		if (stack1.peek()<10) {
        			result=result.concat(String.valueOf(stack1.peek()));
        		}else {
        			result=result.concat(String.valueOf((char)(stack1.peek()+87)));
        		}
        		stack1.pop();
        	}
        }       
        return result;
    }
}
