//593. 有效的正方形
//给定二维空间中四点的坐标，返回四点是否可以构造一个正方形。
//一个点的坐标（x，y）由一个有两个整数的整数数组表示。
//示例:
//输入: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
//输出: True
//注意:
//所有输入整数都在 [-10000，10000] 范围内。
//一个有效的正方形有四个等长的正长和四个等角（90度角）。
//输入点没有顺序。
package validsquare;

import java.util.Arrays;

public class Solution {
    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {
    	int[] dis=new int[6];
        dis[0]=(p1[0]-p2[0])*(p1[0]-p2[0])+(p1[1]-p2[1])*(p1[1]-p2[1]);
        dis[1]=(p1[0]-p3[0])*(p1[0]-p3[0])+(p1[1]-p3[1])*(p1[1]-p3[1]);
        dis[2]=(p1[0]-p4[0])*(p1[0]-p4[0])+(p1[1]-p4[1])*(p1[1]-p4[1]);
        dis[3]=(p2[0]-p3[0])*(p2[0]-p3[0])+(p2[1]-p3[1])*(p2[1]-p3[1]);
        dis[4]=(p2[0]-p4[0])*(p2[0]-p4[0])+(p2[1]-p4[1])*(p2[1]-p4[1]);
        dis[5]=(p3[0]-p4[0])*(p3[0]-p4[0])+(p3[1]-p4[1])*(p3[1]-p4[1]);
        Arrays.sort(dis);
        if ((dis[5]!=dis[0])&&(dis[5]==2*dis[0])&&(dis[0]==dis[1]&&dis[1]==dis[2]&&dis[2]==dis[3])&&(dis[4]==dis[5])) {
        	return true;
        }else {
        	return false;
        }
    }
}
